services:
  redis:
    image: redis:7.4.3-alpine
    ports:
      - "6380:6379" # Expose Redis on port 6380 (host:container)
    networks:
      - ragainetwork
    volumes:
      - redis_data:/data # Persist Redis data
    healthcheck: # Optional but recommended
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  api:
    container_name: ragaiapi
    build:
      context: .
      dockerfile: ./Dockerfile
      args:
        USER_ID: 10103 # Match host user "ragai" UID
        GROUP_ID: 10103 # Match host user "ragai" GID
    environment:
      MODULE_NAME: ragaiapi.app.main
      AUTORELOAD: 1
      DOCKER: "True"
    restart: on-failure
    depends_on:
      redis:
        condition: service_healthy # Wait for Redis to be ready
    volumes:
      - ./logs:/ragaiapi/logs
      - ./processed_files:/ragaiapi/processed_files
      # Avoid mounting app code in production (interferes with Dockerfile COPY)
      # For development only:
      - ./app:/ragaiapi/app
      - ./tests:/ragaiapi/tests
      - ./conftest.py:/ragaiapi/conftest.py
      - ./pytest.ini:/ragaiapi/pytest.ini
      - ./.flake8:/ragaiapi/.flake8
    ports:
      - "10103:10103"
    env_file:
      - .env
    networks:
      - ragainetwork
    user: "10103:10103" # Match UID/GID of host user "ragai"
    hostname: ragaiapi

  celery-worker:
    build:
      context: .
      args:
        USER_ID: 10103
        GROUP_ID: 10103
    command: celery -A app.tasks.celery_worker.celery_app worker --loglevel=info
    env_file:
      - .env
    networks:
      - ragainetwork
    depends_on:
      - redis
    volumes:
      - ./logs:/ragaiapi/logs
      - ./processed_files:/ragaiapi/processed_files

  flower:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        USER_ID: 10103
        GROUP_ID: 10103
    container_name: flower
    command: celery -A app.tasks.celery_worker.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - FLOWER_BASIC_AUTH=user:password # Replace with secure credentials
    env_file:
      - .env
    depends_on:
      - redis
    networks:
      - ragainetwork
    user: "10103:10103"

networks:
  ragainetwork:
    driver: bridge

volumes:
  redis_data: # Named volume for Redis persistence
